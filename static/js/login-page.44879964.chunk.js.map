{"version":3,"sources":["styles/transition/fade.module.css","views/LoginView/LoginView.js"],"names":["module","exports","LoginView","state","email","password","handleChange","target","name","value","setState","handleSubmit","e","preventDefault","props","onLogin","this","removeError","Section","CSSTransition","in","isError","timeout","classNames","fadeTransition","unmountOnExit","Alert","dismissible","variant","onClose","className","Heading","Form","onSubmit","FloatingLabel","controlId","label","Control","type","placeholder","onChange","Text","id","muted","Button","to","routes","register","Component","defaulProps","mapDispatchToProps","logIn","connect","getIsError"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,eAAe,2BAA2B,KAAO,mBAAmB,cAAc,4B,uRCiB1HC,E,4MACJC,MAAQ,CACNC,MAAO,GACPC,SAAU,I,EAOZC,aAAe,YAAkC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAAiBF,EAAOC,K,EAG1BE,aAAe,SAAAC,GACbA,EAAEC,iBAEF,EAAKC,MAAMC,QAAQ,EAAKZ,OAExB,EAAKO,SAAS,CAAEF,KAAM,GAAIJ,MAAO,GAAIC,SAAU,M,uDAbjD,WACEW,KAAKF,MAAMG,gB,oBAeb,WAAU,IAAD,OACP,EAA4BD,KAAKb,MAAzBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAEf,OACE,eAACa,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,GAAIJ,KAAKF,MAAMO,QACfC,QAAS,IACTC,WAAYC,IACZC,eAAa,EAJf,SAME,eAACC,EAAA,EAAD,CACEC,aAAW,EACXC,QAAQ,OACRC,QAAS,kBAAM,EAAKf,MAAMG,eAC1Ba,UAAU,eAJZ,UAME,cAACJ,EAAA,EAAMK,QAAP,0CACA,8CACA,wEACA,kEACA,iEAGJ,eAACC,EAAA,EAAD,CAAMC,SAAUjB,KAAKL,aAAcmB,UAAU,cAA7C,UACE,cAACI,EAAA,EAAD,CACEC,UAAU,gBACVC,MAAM,gBACNN,UAAU,OAHZ,SAKE,cAACE,EAAA,EAAKK,QAAN,CACE7B,KAAK,QACL8B,KAAK,QACLC,YAAY,mBACZ9B,MAAOL,EACPoC,SAAUxB,KAAKV,iBAInB,eAAC4B,EAAA,EAAD,CAAeC,UAAU,mBAAmBC,MAAM,WAAlD,UACE,cAACJ,EAAA,EAAKK,QAAN,CACE,mBAAiB,oBACjB7B,KAAK,WACL8B,KAAK,WACLC,YAAY,WACZ9B,MAAOJ,EACPmC,SAAUxB,KAAKV,eAEjB,cAAC0B,EAAA,EAAKS,KAAN,CAAWC,GAAG,oBAAoBC,OAAK,EAAvC,8DAIF,cAACC,EAAA,EAAD,CAAQd,UAAU,gBAAgBQ,KAAK,SAAvC,oBAGA,sBAAKR,UAAU,iBAAf,UACE,uDACA,cAAC,IAAD,CAAMA,UAAU,cAAce,GAAIC,IAAOC,SAAzC,kC,GA/EYC,aAyFxB9C,EAAU+C,YAAc,CACtBlC,QAAS,kBAAM,MACfE,YAAa,kBAAM,OASrB,IAIMiC,EAAqB,CACzBnC,QAASoC,IACTlC,YAAaA,KAGAmC,eATS,SAAAjD,GAAK,MAAK,CAChCkB,QAASgC,YAAWlD,MAQkB+C,EAAzBE,CAA6ClD","file":"static/js/login-page.44879964.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__33lXT\",\"enter-active\":\"fade_enter-active__3_VRV\",\"exit\":\"fade_exit__3uxup\",\"exit-active\":\"fade_exit-active__25vRx\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport FloatingLabel from 'react-bootstrap/FloatingLabel';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport { logIn, removeError } from '../../redux/auth/auth-operations';\r\nimport { getIsError } from '../../redux/auth/auth-selectors';\r\nimport Section from '../../components/Section/Section';\r\nimport routes from '../../routes';\r\nimport './LoginView.scss';\r\nimport fadeTransition from '../../styles/transition/fade.module.css';\r\n\r\nclass LoginView extends Component {\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.removeError();\r\n  }\r\n\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onLogin(this.state);\r\n\r\n    this.setState({ name: '', email: '', password: '' });\r\n  };\r\n\r\n  render() {\r\n    const { email, password } = this.state;\r\n\r\n    return (\r\n      <Section>\r\n        <CSSTransition\r\n          in={this.props.isError}\r\n          timeout={200}\r\n          classNames={fadeTransition}\r\n          unmountOnExit\r\n        >\r\n          <Alert\r\n            dismissible\r\n            variant=\"info\"\r\n            onClose={() => this.props.removeError()}\r\n            className=\"login__alert\"\r\n          >\r\n            <Alert.Heading>Something with entered data</Alert.Heading>\r\n            <p>Please check:</p>\r\n            <p>-your password length minimum 7 symbols</p>\r\n            <p>-email format is name@example.com</p>\r\n            <p>-or you can try to register</p>\r\n          </Alert>\r\n        </CSSTransition>\r\n        <Form onSubmit={this.handleSubmit} className=\"login__form\">\r\n          <FloatingLabel\r\n            controlId=\"floatingInput\"\r\n            label=\"Email address\"\r\n            className=\"mb-3\"\r\n          >\r\n            <Form.Control\r\n              name=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"name@example.com\"\r\n              value={email}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FloatingLabel>\r\n\r\n          <FloatingLabel controlId=\"floatingPassword\" label=\"Password\">\r\n            <Form.Control\r\n              aria-describedby=\"passwordHelpBlock\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={password}\r\n              onChange={this.handleChange}\r\n            />\r\n            <Form.Text id=\"passwordHelpBlock\" muted>\r\n              Your password must minimum 7 characters long.\r\n            </Form.Text>\r\n          </FloatingLabel>\r\n          <Button className=\"login__button\" type=\"submit\">\r\n            Log In\r\n          </Button>\r\n          <div className=\"login__wrapper\">\r\n            <p>Don't have an account?</p>\r\n            <Link className=\"login__link\" to={routes.register}>\r\n              Sign Up\r\n            </Link>\r\n          </div>\r\n        </Form>\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n\r\nLoginView.defaulProps = {\r\n  onLogin: () => null,\r\n  removeError: () => null,\r\n};\r\n\r\nLoginView.propTypes = {\r\n  isError: PropTypes.bool,\r\n  onLogin: PropTypes.func,\r\n  removeError: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isError: getIsError(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogin: logIn,\r\n  removeError: removeError,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginView);"],"sourceRoot":""}